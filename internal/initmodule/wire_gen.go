// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package initmodule

import (
	"coincap/internal/facade"
	"coincap/internal/gateway"
	"coincap/internal/repository"
	"coincap/internal/rest_api/controller"
	"coincap/internal/usecase"
	"coincap/pkg/cfg"
	"coincap/pkg/database"
	"context"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitAppServer(ctx context.Context, config *cfg.ConfigSchema) *RestAPIWrapper {
	healthCheck := controller.NewHealthCheck()
	dbItf := database.Init(config)
	userRepositoryParams := repository.UserRepositoryParams{
		DB: dbItf,
	}
	userRepositoryItf := repository.NewUserRepository(userRepositoryParams)
	userUseCaseParams := usecase.UserUseCaseParams{
		UserRepo: userRepositoryItf,
		Config:   config,
	}
	userUsecaseItf := usecase.NewUserUseCase(userUseCaseParams)
	userFacadeParams := facade.UserFacadeParams{
		UserUC: userUsecaseItf,
	}
	userFacadeItf := facade.NewUserFacade(userFacadeParams)
	userCtrlParams := controller.UserCtrlParams{
		UserFacade: userFacadeItf,
	}
	userCtrl := controller.NewUserCtrl(userCtrlParams)
	myCoinRepositoryParams := repository.MyCoinRepositoryParams{
		DB: dbItf,
	}
	myCoinRepositoryItf := repository.NewMyCoinRepository(myCoinRepositoryParams)
	myCoinUseCaseParams := usecase.MyCoinUseCaseParams{
		MyCoinRepository: myCoinRepositoryItf,
	}
	myCoinUsecaseItf := usecase.NewMyCoinUsecase(myCoinUseCaseParams)
	coinCapGatewayParams := gateway.CoinCapGatewayParams{
		Config: config,
	}
	coinCapGatewayItf := gateway.NewCoinCapGateway(coinCapGatewayParams)
	coinCapUseCaseParams := usecase.CoinCapUseCaseParams{
		CoinCapGateway: coinCapGatewayItf,
	}
	coinCapUsecaseItf := usecase.NewCoinUsecase(coinCapUseCaseParams)
	myCoinFacadeParams := facade.MyCoinFacadeParams{
		MyCoinUC:  myCoinUsecaseItf,
		UserUC:    userUsecaseItf,
		CoinCapUC: coinCapUsecaseItf,
	}
	myCoinFacadeItf := facade.NewMyCoinFacade(myCoinFacadeParams)
	myCoinCtrlParams := controller.MyCoinCtrlParams{
		MyCoinFacade: myCoinFacadeItf,
	}
	myCoinCtrl := controller.NewMyCoinCtrl(myCoinCtrlParams)
	coinFacadeParams := facade.CoinFacadeParams{
		CoinCapUC: coinCapUsecaseItf,
	}
	coinFacadeItf := facade.NewCoinFacade(coinFacadeParams)
	coinCtrlParams := controller.CoinCtrlParams{
		CoinFacade: coinFacadeItf,
	}
	coinCtrl := controller.NewCoinCtrl(coinCtrlParams)
	schema := controller.New(healthCheck, userCtrl, myCoinCtrl, coinCtrl)
	usecaseSchema := usecase.New(userUsecaseItf)
	restAPIWrapper := NewRestAPIWrapper(schema, usecaseSchema)
	return restAPIWrapper
}

// wire.go:

var (
	pkgSet = wire.NewSet(database.Init)

	gatewaySet = wire.NewSet(wire.Struct(new(gateway.CoinCapGatewayParams), "*"), gateway.NewCoinCapGateway)

	repositorySet = wire.NewSet(wire.Struct(new(repository.UserRepositoryParams), "*"), repository.NewUserRepository, wire.Struct(new(repository.MyCoinRepositoryParams), "*"), repository.NewMyCoinRepository)

	usecaseSet = wire.NewSet(wire.Struct(new(usecase.UserUseCaseParams), "*"), usecase.NewUserUseCase, wire.Struct(new(usecase.CoinCapUseCaseParams), "*"), usecase.NewCoinUsecase, wire.Struct(new(usecase.MyCoinUseCaseParams), "*"), usecase.NewMyCoinUsecase, usecase.New)

	facadeSet = wire.NewSet(wire.Struct(new(facade.UserFacadeParams), "*"), facade.NewUserFacade, wire.Struct(new(facade.CoinFacadeParams), "*"), facade.NewCoinFacade, wire.Struct(new(facade.MyCoinFacadeParams), "*"), facade.NewMyCoinFacade)

	controllerSet = wire.NewSet(controller.NewHealthCheck, wire.Struct(new(controller.MyCoinCtrlParams), "*"), controller.NewMyCoinCtrl, wire.Struct(new(controller.UserCtrlParams), "*"), controller.NewUserCtrl, wire.Struct(new(controller.CoinCtrlParams), "*"), controller.NewCoinCtrl, controller.New)

	restApiSet = wire.NewSet(
		NewRestAPIWrapper,
	)

	restSet = wire.NewSet(
		pkgSet,
		gatewaySet,
		repositorySet,
		usecaseSet,
		facadeSet,
		controllerSet,
		restApiSet,
	)
)
